import anyIsWeakMap from './anyIsWeakMap'

describe('anyIsWeakMap', () => {
  test('returns true for instances of WeakMap', () => {
    expect(anyIsWeakMap(new WeakMap())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsWeakMap(undefined)).toBe(false)
    expect(anyIsWeakMap(null)).toBe(false)
    expect(anyIsWeakMap('')).toBe(false)
    expect(anyIsWeakMap('abc')).toBe(false)
    expect(anyIsWeakMap(false)).toBe(false)
    expect(anyIsWeakMap(true)).toBe(false)
    expect(anyIsWeakMap(0)).toBe(false)
    expect(anyIsWeakMap(-1)).toBe(false)
    expect(anyIsWeakMap(1)).toBe(false)
    expect(anyIsWeakMap(NaN)).toBe(false)
    expect(anyIsWeakMap(Infinity)).toBe(false)
    expect(anyIsWeakMap(-Infinity)).toBe(false)
    expect(anyIsWeakMap({})).toBe(false)
    expect(anyIsWeakMap([])).toBe(false)
    expect(anyIsWeakMap(/abc/)).toBe(false)
    expect(anyIsWeakMap(new RegExp('abc'))).toBe(false)
    expect(anyIsWeakMap(async () => {})).toBe(false)
    expect(anyIsWeakMap(() => {})).toBe(false)
    expect(anyIsWeakMap(function () {})).toBe(false)
    expect(anyIsWeakMap(function* () {})).toBe(false)
    expect(anyIsWeakMap((function* () {})())).toBe(false)
    expect(anyIsWeakMap(new Array(0))).toBe(false)
    expect(anyIsWeakMap(new ArrayBuffer(2))).toBe(false)
    expect(anyIsWeakMap(new Boolean(false))).toBe(false)
    expect(anyIsWeakMap(new Boolean(true))).toBe(false)
    expect(anyIsWeakMap(new Date())).toBe(false)
    expect(anyIsWeakMap(new Error())).toBe(false)
    expect(anyIsWeakMap(new Number(1))).toBe(false)
    expect(anyIsWeakMap(new Promise(() => {}))).toBe(false)
    expect(anyIsWeakMap(new Proxy({}, {}))).toBe(false)
    expect(anyIsWeakMap(new Set())).toBe(false)
    expect(anyIsWeakMap(new String('abc'))).toBe(false)
    expect(anyIsWeakMap(Symbol('abc'))).toBe(false)
    expect(anyIsWeakMap(new WeakSet())).toBe(false)
  })
})
