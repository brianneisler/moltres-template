import ImmutableList from '../js/ImmutableList'
import anyIsArray from './anyIsArray'

describe('anyIsArray', () => {
  test('identifies arrays', () => {
    expect(anyIsArray([])).toBe(true)
    expect(anyIsArray(new Array(0))).toBe(true)
    expect(anyIsArray([0])).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsArray(undefined)).toBe(false)
    expect(anyIsArray(null)).toBe(false)
    expect(anyIsArray('')).toBe(false)
    expect(anyIsArray('abc')).toBe(false)
    expect(anyIsArray(false)).toBe(false)
    expect(anyIsArray(true)).toBe(false)
    expect(anyIsArray(0)).toBe(false)
    expect(anyIsArray(-1)).toBe(false)
    expect(anyIsArray(1)).toBe(false)
    expect(anyIsArray(NaN)).toBe(false)
    expect(anyIsArray(Infinity)).toBe(false)
    expect(anyIsArray(-Infinity)).toBe(false)
    expect(anyIsArray({})).toBe(false)
    expect(anyIsArray(/abc/)).toBe(false)
    expect(anyIsArray(async () => {})).toBe(false)
    expect(anyIsArray(() => {})).toBe(false)
    expect(anyIsArray(function () {})).toBe(false)
    expect(anyIsArray((function* () {})())).toBe(false)
    expect(anyIsArray(new ArrayBuffer(2))).toBe(false)
    expect(anyIsArray(new Boolean(false))).toBe(false)
    expect(anyIsArray(new Boolean(true))).toBe(false)
    expect(anyIsArray(new Date())).toBe(false)
    expect(anyIsArray(new Error())).toBe(false)
    expect(anyIsArray(new ImmutableList([]))).toBe(false)
    expect(anyIsArray(new Map())).toBe(false)
    expect(anyIsArray(new Number(1))).toBe(false)
    expect(anyIsArray(new Promise(() => {}))).toBe(false)
    expect(anyIsArray(new Proxy({}, {}))).toBe(false)
    expect(anyIsArray(new Set())).toBe(false)
    expect(anyIsArray(new String('abc'))).toBe(false)
    expect(anyIsArray(Symbol('abc'))).toBe(false)
    expect(anyIsArray(Symbol.for('def'))).toBe(false)
    expect(anyIsArray(new WeakMap())).toBe(false)
    expect(anyIsArray(new WeakSet())).toBe(false)
  })
})
