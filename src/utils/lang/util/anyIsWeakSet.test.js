import anyIsWeakSet from './anyIsWeakSet'

describe('anyIsWeakSet', () => {
  test('returns true for instances of Set', () => {
    expect(anyIsWeakSet(new WeakSet())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsWeakSet(undefined)).toBe(false)
    expect(anyIsWeakSet(null)).toBe(false)
    expect(anyIsWeakSet('')).toBe(false)
    expect(anyIsWeakSet('abc')).toBe(false)
    expect(anyIsWeakSet(false)).toBe(false)
    expect(anyIsWeakSet(true)).toBe(false)
    expect(anyIsWeakSet(0)).toBe(false)
    expect(anyIsWeakSet(-1)).toBe(false)
    expect(anyIsWeakSet(1)).toBe(false)
    expect(anyIsWeakSet(NaN)).toBe(false)
    expect(anyIsWeakSet(Infinity)).toBe(false)
    expect(anyIsWeakSet(-Infinity)).toBe(false)
    expect(anyIsWeakSet({})).toBe(false)
    expect(anyIsWeakSet([])).toBe(false)
    expect(anyIsWeakSet(/abc/)).toBe(false)
    expect(anyIsWeakSet(new RegExp('abc'))).toBe(false)
    expect(anyIsWeakSet(async () => {})).toBe(false)
    expect(anyIsWeakSet(() => {})).toBe(false)
    expect(anyIsWeakSet(function () {})).toBe(false)
    expect(anyIsWeakSet(function* () {})).toBe(false)
    expect(anyIsWeakSet((function* () {})())).toBe(false)
    expect(anyIsWeakSet(new Array(0))).toBe(false)
    expect(anyIsWeakSet(new ArrayBuffer(2))).toBe(false)
    expect(anyIsWeakSet(new Boolean(false))).toBe(false)
    expect(anyIsWeakSet(new Boolean(true))).toBe(false)
    expect(anyIsWeakSet(new Date())).toBe(false)
    expect(anyIsWeakSet(new Error())).toBe(false)
    expect(anyIsWeakSet(new Number(1))).toBe(false)
    expect(anyIsWeakSet(new Promise(() => {}))).toBe(false)
    expect(anyIsWeakSet(new Proxy({}, {}))).toBe(false)
    expect(anyIsWeakSet(new Set())).toBe(false)
    expect(anyIsWeakSet(new String('abc'))).toBe(false)
    expect(anyIsWeakSet(Symbol('abc'))).toBe(false)
    expect(anyIsWeakSet(new WeakMap())).toBe(false)
  })
})
