import anyIsNull from './anyIsNull'

describe('anyIsNull', () => {
  test('returns true for null', () => {
    expect(anyIsNull(null)).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsNull(undefined)).toBe(false)
    expect(anyIsNull('')).toBe(false)
    expect(anyIsNull('abc')).toBe(false)
    expect(anyIsNull(false)).toBe(false)
    expect(anyIsNull(true)).toBe(false)
    expect(anyIsNull(0)).toBe(false)
    expect(anyIsNull(-1)).toBe(false)
    expect(anyIsNull(1)).toBe(false)
    expect(anyIsNull(NaN)).toBe(false)
    expect(anyIsNull(Infinity)).toBe(false)
    expect(anyIsNull(-Infinity)).toBe(false)
    expect(anyIsNull({})).toBe(false)
    expect(anyIsNull([])).toBe(false)
    expect(anyIsNull(new Array(0))).toBe(false)
    expect(anyIsNull([0])).toBe(false)
    expect(anyIsNull(/abc/)).toBe(false)
    expect(anyIsNull(async () => {})).toBe(false)
    expect(anyIsNull(() => {})).toBe(false)
    expect(anyIsNull(function () {})).toBe(false)
    expect(anyIsNull((function* () {})())).toBe(false)
    expect(anyIsNull(new ArrayBuffer(2))).toBe(false)
    expect(anyIsNull(new Boolean(false))).toBe(false)
    expect(anyIsNull(new Boolean(true))).toBe(false)
    expect(anyIsNull(new Date())).toBe(false)
    expect(anyIsNull(new Error())).toBe(false)
    expect(anyIsNull(new Map())).toBe(false)
    expect(anyIsNull(new Number(1))).toBe(false)
    expect(anyIsNull(new Promise(() => {}))).toBe(false)
    expect(anyIsNull(new Proxy({}, {}))).toBe(false)
    expect(anyIsNull(new Set())).toBe(false)
    expect(anyIsNull(new String('abc'))).toBe(false)
    expect(anyIsNull(Symbol('abc'))).toBe(false)
    expect(anyIsNull(new WeakMap())).toBe(false)
    expect(anyIsNull(new WeakSet())).toBe(false)
  })
})
