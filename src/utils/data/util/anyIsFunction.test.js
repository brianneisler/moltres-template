import anyIsFunction from './anyIsFunction'

describe('anyIsFunction', () => {
  test('returns true for functions', () => {
    expect(anyIsFunction(async () => {})).toBe(true)
    expect(anyIsFunction(() => {})).toBe(true)
    expect(anyIsFunction(function () {})).toBe(true)
    expect(anyIsFunction(function* () {})).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsFunction(undefined)).toBe(false)
    expect(anyIsFunction(null)).toBe(false)
    expect(anyIsFunction('')).toBe(false)
    expect(anyIsFunction('abc')).toBe(false)
    expect(anyIsFunction(false)).toBe(false)
    expect(anyIsFunction(true)).toBe(false)
    expect(anyIsFunction(0)).toBe(false)
    expect(anyIsFunction(-1)).toBe(false)
    expect(anyIsFunction(1)).toBe(false)
    expect(anyIsFunction(NaN)).toBe(false)
    expect(anyIsFunction(Infinity)).toBe(false)
    expect(anyIsFunction(-Infinity)).toBe(false)
    expect(anyIsFunction({})).toBe(false)
    expect(anyIsFunction([])).toBe(false)
    expect(anyIsFunction(/abc/)).toBe(false)
    expect(anyIsFunction((function* () {})())).toBe(false)
    expect(anyIsFunction(new Array(0))).toBe(false)
    expect(anyIsFunction(new ArrayBuffer(2))).toBe(false)
    expect(anyIsFunction(new Boolean(false))).toBe(false)
    expect(anyIsFunction(new Boolean(true))).toBe(false)
    expect(anyIsFunction(new Date())).toBe(false)
    expect(anyIsFunction(new Error())).toBe(false)
    expect(anyIsFunction(new Number(1))).toBe(false)
    expect(anyIsFunction(new Promise(() => {}))).toBe(false)
    expect(anyIsFunction(new Proxy({}, {}))).toBe(false)
    expect(anyIsFunction(new Set())).toBe(false)
    expect(anyIsFunction(new String('abc'))).toBe(false)
    expect(anyIsFunction(Symbol('abc'))).toBe(false)
    expect(anyIsFunction(new WeakMap())).toBe(false)
    expect(anyIsFunction(new WeakSet())).toBe(false)
  })
})
