describe('index', () => {
  test('require runs without error', async () => {
    const mod = require('./')
    expect(mod).toMatchObject({
      __: expect.any(Object),
      addIndex: expect.any(Function),
      always: expect.any(Function),
      append: expect.any(Function),
      applyIfHas: expect.any(Function),
      arrayLikeKeys: expect.any(Function),
      asciiSize: expect.any(Function),
      asciiToArray: expect.any(Function),
      assoc: expect.any(Function),
      assocIndex: expect.any(Function),
      assocPath: expect.any(Function),
      assocProp: expect.any(Function),
      bind: expect.any(Function),
      Buffer: expect.any(Function),
      bufferToStream: expect.any(Function),
      cacheChain: expect.any(Function),
      camelCase: expect.any(Function),
      capitalize: expect.any(Function),
      compose: expect.any(Function),
      contentTypeToCharset: expect.any(Function),
      contentTypeToExtension: expect.any(Function),
      copyBufferToUint8Array: expect.any(Function),
      createBuffer: expect.any(Function),
      defn: expect.any(Function),
      defprotocol: expect.any(Function),
      dispatchable: expect.any(Function),
      each: expect.any(Function),
      eachSeries: expect.any(Function),
      fetch: expect.any(Function),
      forEach: expect.any(Function),
      forEachSeries: expect.any(Function),
      get: expect.any(Function),
      getPath: expect.any(Function),
      getProp: expect.any(Function),
      getTag: expect.any(Function),
      has: expect.any(Function),
      hasPath: expect.any(Function),
      hasProp: expect.any(Function),
      hashStream: expect.any(Function),
      hashString: expect.any(Function),
      head: expect.any(Function),
      indexBy: expect.any(Function),
      indexOf: expect.any(Function),
      init: expect.any(Function),
      is: expect.any(Function),
      isArguments: expect.any(Function),
      isArray: expect.any(Function),
      isArrayLike: expect.any(Function),
      isBuffer: expect.any(Function),
      isEmpty: expect.any(Function),
      isFirebaseApp: expect.any(Function),
      isFunction: expect.any(Function),
      isGenerator: expect.any(Function),
      isGeneratorFunction: expect.any(Function),
      isIndex: expect.any(Function),
      isInteger: expect.any(Function),
      isIterable: expect.any(Function),
      isIterator: expect.any(Function),
      isKey: expect.any(Function),
      isLength: expect.any(Function),
      isMap: expect.any(Function),
      isNil: expect.any(Function),
      isNull: expect.any(Function),
      isNumber: expect.any(Function),
      isObject: expect.any(Function),
      isObjectLike: expect.any(Function),
      isPlainFunction: expect.any(Function),
      isPlainObject: expect.any(Function),
      isPromise: expect.any(Function),
      isPrototype: expect.any(Function),
      isReadableStream: expect.any(Function),
      isString: expect.any(Function),
      isSymbol: expect.any(Function),
      isTransformer: expect.any(Function),
      isTypedArray: expect.any(Function),
      isUndefined: expect.any(Function),
      isUrl: expect.any(Function),
      iterator: expect.any(Function),
      length: expect.any(Function),
      lens: expect.any(Function),
      lensIndex: expect.any(Function),
      lensPath: expect.any(Function),
      lensProp: expect.any(Function),
      listPromise: expect.any(Function),
      lookupContentType: expect.any(Function),
      map: expect.any(Function),
      nth: expect.any(Function),
      objectKeys: expect.any(Function),
      omit: expect.any(Function),
      once: expect.any(Function),
      over: expect.any(Function),
      padStart: expect.any(Function),
      path: expect.any(Function),
      pathEq: expect.any(Function),
      pick: expect.any(Function),
      pipe: expect.any(Function),
      prepend: expect.any(Function),
      prop: expect.any(Function),
      propEq: expect.any(Function),
      propOr: expect.any(Function),
      Readable: expect.any(Function),
      ReadableBufferStream: expect.any(Function),
      readableStream: expect.any(Function),
      reduce: expect.any(Function),
      reduceRight: expect.any(Function),
      satisfies: expect.any(Function),
      set: expect.any(Function),
      stringToStream: expect.any(Function),
      tail: expect.any(Function),
      toContentType: expect.any(Function),
      toLower: expect.any(Function),
      toString: expect.any(Function),
      toUpper: expect.any(Function),
      uploadFileByteArray: expect.any(Function),
      without: expect.any(Function),
      words: expect.any(Function),
      xfBase: expect.any(Object),
      xmap: expect.any(Function),
      xwrap: expect.any(Function)
    })
  })
})
