import isNativeObject from './isNativeObject'

describe('isNativeObject', () => {
  test('returns true for instances of native objects', () => {
    expect(isNativeObject(new Array(0))).toBe(true)
    expect(isNativeObject(new ArrayBuffer(2))).toBe(true)
    expect(isNativeObject(new Boolean(false))).toBe(true)
    expect(isNativeObject(new Boolean(true))).toBe(true)
    expect(isNativeObject(new Date())).toBe(true)
    expect(isNativeObject(new Error())).toBe(true)
    expect(isNativeObject(new Number(1))).toBe(true)
    expect(isNativeObject(new Promise(() => {}))).toBe(true)
    // expect(isNativeObject(new Proxy({}, {}))).toBe(true)
    expect(isNativeObject(new Set())).toBe(true)
    expect(isNativeObject(new String('abc'))).toBe(true)
    // expect(isNativeObject(Symbol('abc'))).toBe(true)
    expect(isNativeObject(new WeakMap())).toBe(true)
    expect(isNativeObject(new WeakSet())).toBe(true)
    expect(isNativeObject(/abc/)).toBe(true)
    expect(isNativeObject([])).toBe(true)

    expect(isNativeObject(async () => {})).toBe(true)
    expect(isNativeObject(() => {})).toBe(true)
    expect(isNativeObject(function() {})).toBe(true)
    expect(isNativeObject(function*() {})).toBe(true)
    expect(isNativeObject((function*() {})())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isNativeObject(undefined)).toBe(false)
    expect(isNativeObject(null)).toBe(false)
    expect(isNativeObject('')).toBe(false)
    expect(isNativeObject('abc')).toBe(false)
    expect(isNativeObject(false)).toBe(false)
    expect(isNativeObject(true)).toBe(false)
    expect(isNativeObject(0)).toBe(false)
    expect(isNativeObject(-1)).toBe(false)
    expect(isNativeObject(1)).toBe(false)
    expect(isNativeObject(NaN)).toBe(false)
    expect(isNativeObject(Infinity)).toBe(false)
    expect(isNativeObject(-Infinity)).toBe(false)
    expect(isNativeObject({})).toBe(false)
  })
})
