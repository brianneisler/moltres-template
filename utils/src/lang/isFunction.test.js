import isFunction from './isFunction'

describe('isFunction', () => {
  test('returns true for functions', () => {
    expect(isFunction(async () => {})).toBe(true)
    expect(isFunction(() => {})).toBe(true)
    expect(isFunction(function() {})).toBe(true)
    expect(isFunction(function*() {})).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isFunction(undefined)).toBe(false)
    expect(isFunction(null)).toBe(false)
    expect(isFunction('')).toBe(false)
    expect(isFunction('abc')).toBe(false)
    expect(isFunction(false)).toBe(false)
    expect(isFunction(true)).toBe(false)
    expect(isFunction(0)).toBe(false)
    expect(isFunction(-1)).toBe(false)
    expect(isFunction(1)).toBe(false)
    expect(isFunction(NaN)).toBe(false)
    expect(isFunction(Infinity)).toBe(false)
    expect(isFunction(-Infinity)).toBe(false)
    expect(isFunction({})).toBe(false)
    expect(isFunction([])).toBe(false)
    expect(isFunction(/abc/)).toBe(false)
    expect(isFunction((function*() {})())).toBe(false)
    expect(isFunction(new Array(0))).toBe(false)
    expect(isFunction(new ArrayBuffer(2))).toBe(false)
    expect(isFunction(new Boolean(false))).toBe(false)
    expect(isFunction(new Boolean(true))).toBe(false)
    expect(isFunction(new Date())).toBe(false)
    expect(isFunction(new Error())).toBe(false)
    expect(isFunction(new Number(1))).toBe(false)
    expect(isFunction(new Promise(() => {}))).toBe(false)
    expect(isFunction(new Proxy({}, {}))).toBe(false)
    expect(isFunction(new Set())).toBe(false)
    expect(isFunction(new String('abc'))).toBe(false)
    expect(isFunction(Symbol('abc'))).toBe(false)
    expect(isFunction(new WeakMap())).toBe(false)
    expect(isFunction(new WeakSet())).toBe(false)
  })
})
