import isSymbol from './isSymbol'

describe('isSymbol', () => {
  test('returns true for Symbols', () => {
    expect(isSymbol(Symbol('abc'))).toBe(true)
    expect(isSymbol(Symbol.for('def'))).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isSymbol(undefined)).toBe(false)
    expect(isSymbol(null)).toBe(false)
    expect(isSymbol('')).toBe(false)
    expect(isSymbol('abc')).toBe(false)
    expect(isSymbol(false)).toBe(false)
    expect(isSymbol(true)).toBe(false)
    expect(isSymbol(0)).toBe(false)
    expect(isSymbol(-1)).toBe(false)
    expect(isSymbol(1)).toBe(false)
    expect(isSymbol(NaN)).toBe(false)
    expect(isSymbol(Infinity)).toBe(false)
    expect(isSymbol(-Infinity)).toBe(false)
    expect(isSymbol({})).toBe(false)
    expect(isSymbol([])).toBe(false)
    expect(isSymbol(new Array(0))).toBe(false)
    expect(isSymbol([0])).toBe(false)
    expect(isSymbol(/abc/)).toBe(false)
    expect(isSymbol(async () => {})).toBe(false)
    expect(isSymbol(() => {})).toBe(false)
    expect(isSymbol(function() {})).toBe(false)
    expect(isSymbol((function*() {})())).toBe(false)
    expect(isSymbol(new ArrayBuffer(2))).toBe(false)
    expect(isSymbol(new Boolean(false))).toBe(false)
    expect(isSymbol(new Boolean(true))).toBe(false)
    expect(isSymbol(new Date())).toBe(false)
    expect(isSymbol(new Error())).toBe(false)
    expect(isSymbol(new Map())).toBe(false)
    expect(isSymbol(new Number(1))).toBe(false)
    expect(isSymbol(new Promise(() => {}))).toBe(false)
    expect(isSymbol(new Proxy({}, {}))).toBe(false)
    expect(isSymbol(new Set())).toBe(false)
    expect(isSymbol(new String('abc'))).toBe(false)
    expect(isSymbol(new WeakMap())).toBe(false)
    expect(isSymbol(new WeakSet())).toBe(false)
  })
})
