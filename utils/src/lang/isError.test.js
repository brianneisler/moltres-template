import isError from './isError'

describe('isError', () => {
  test('returns true for Erorr instance', () => {
    expect(isError(new Error())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isError(undefined)).toBe(false)
    expect(isError(null)).toBe(false)
    expect(isError('')).toBe(false)
    expect(isError('abc')).toBe(false)
    expect(isError(false)).toBe(false)
    expect(isError(true)).toBe(false)
    expect(isError(0)).toBe(false)
    expect(isError(-1)).toBe(false)
    expect(isError(1)).toBe(false)
    expect(isError(NaN)).toBe(false)
    expect(isError(Infinity)).toBe(false)
    expect(isError(-Infinity)).toBe(false)
    expect(isError({})).toBe(false)
    expect(isError([])).toBe(false)
    expect(isError(/abc/)).toBe(false)
    expect(isError(async () => {})).toBe(false)
    expect(isError(() => {})).toBe(false)
    expect(isError(function() {})).toBe(false)
    expect(isError((function*() {})())).toBe(false)
    expect(isError(new Array(0))).toBe(false)
    expect(isError(new ArrayBuffer(2))).toBe(false)
    expect(isError(new Boolean(false))).toBe(false)
    expect(isError(new Boolean(true))).toBe(false)
    expect(isError(new Date())).toBe(false)
    expect(isError(new Number(1))).toBe(false)
    expect(isError(new Promise(() => {}))).toBe(false)
    expect(isError(new Proxy({}, {}))).toBe(false)
    expect(isError(new Set())).toBe(false)
    expect(isError(new String('abc'))).toBe(false)
    expect(isError(Symbol('abc'))).toBe(false)
    expect(isError(new WeakMap())).toBe(false)
    expect(isError(new WeakSet())).toBe(false)
  })
})
