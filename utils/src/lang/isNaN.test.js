import isNaN from './isNaN'

describe('isNaN', () => {
  test('returns true for NaN', () => {
    expect(isNaN(NaN)).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isNaN(undefined)).toBe(false)
    expect(isNaN(null)).toBe(false)
    expect(isNaN('')).toBe(false)
    expect(isNaN('abc')).toBe(false)
    expect(isNaN(false)).toBe(false)
    expect(isNaN(true)).toBe(false)
    expect(isNaN(0)).toBe(false)
    expect(isNaN(-1)).toBe(false)
    expect(isNaN(1)).toBe(false)
    expect(isNaN(Infinity)).toBe(false)
    expect(isNaN(-Infinity)).toBe(false)
    expect(isNaN({})).toBe(false)
    expect(isNaN([])).toBe(false)
    expect(isNaN(new Array(0))).toBe(false)
    expect(isNaN([0])).toBe(false)
    expect(isNaN(/abc/)).toBe(false)
    expect(isNaN(async () => {})).toBe(false)
    expect(isNaN(() => {})).toBe(false)
    expect(isNaN(function() {})).toBe(false)
    expect(isNaN((function*() {})())).toBe(false)
    expect(isNaN(new ArrayBuffer(2))).toBe(false)
    expect(isNaN(new Boolean(false))).toBe(false)
    expect(isNaN(new Boolean(true))).toBe(false)
    expect(isNaN(new Date())).toBe(false)
    expect(isNaN(new Error())).toBe(false)
    expect(isNaN(new Map())).toBe(false)
    expect(isNaN(new Number(1))).toBe(false)
    expect(isNaN(new Promise(() => {}))).toBe(false)
    expect(isNaN(new Proxy({}, {}))).toBe(false)
    expect(isNaN(new Set())).toBe(false)
    expect(isNaN(new String('abc'))).toBe(false)
    expect(isNaN(Symbol('abc'))).toBe(false)
    expect(isNaN(Symbol.for('def'))).toBe(false)
    expect(isNaN(new WeakMap())).toBe(false)
    expect(isNaN(new WeakSet())).toBe(false)
  })
})
