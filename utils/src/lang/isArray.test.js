import isArray from './isArray'

describe('isArray', () => {
  test('identifies arrays', () => {
    expect(isArray([])).toBe(true)
    expect(isArray(new Array(0))).toBe(true)
    expect(isArray([0])).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isArray(undefined)).toBe(false)
    expect(isArray(null)).toBe(false)
    expect(isArray('')).toBe(false)
    expect(isArray('abc')).toBe(false)
    expect(isArray(false)).toBe(false)
    expect(isArray(true)).toBe(false)
    expect(isArray(0)).toBe(false)
    expect(isArray(-1)).toBe(false)
    expect(isArray(1)).toBe(false)
    expect(isArray(NaN)).toBe(false)
    expect(isArray(Infinity)).toBe(false)
    expect(isArray(-Infinity)).toBe(false)
    expect(isArray({})).toBe(false)
    expect(isArray(/abc/)).toBe(false)
    expect(isArray(async () => {})).toBe(false)
    expect(isArray(() => {})).toBe(false)
    expect(isArray(function() {})).toBe(false)
    expect(isArray((function*() {})())).toBe(false)
    expect(isArray(new ArrayBuffer(2))).toBe(false)
    expect(isArray(new Boolean(false))).toBe(false)
    expect(isArray(new Boolean(true))).toBe(false)
    expect(isArray(new Date())).toBe(false)
    expect(isArray(new Error())).toBe(false)
    expect(isArray(new Map())).toBe(false)
    expect(isArray(new Number(1))).toBe(false)
    expect(isArray(new Promise(() => {}))).toBe(false)
    expect(isArray(new Proxy({}, {}))).toBe(false)
    expect(isArray(new Set())).toBe(false)
    expect(isArray(new String('abc'))).toBe(false)
    expect(isArray(Symbol('abc'))).toBe(false)
    expect(isArray(Symbol.for('def'))).toBe(false)
    expect(isArray(new WeakMap())).toBe(false)
    expect(isArray(new WeakSet())).toBe(false)
  })
})
