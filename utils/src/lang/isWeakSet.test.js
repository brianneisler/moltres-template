import isWeakSet from './isWeakSet'

describe('isWeakSet', () => {
  test('returns true for instances of Set', () => {
    expect(isWeakSet(new WeakSet())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isWeakSet(undefined)).toBe(false)
    expect(isWeakSet(null)).toBe(false)
    expect(isWeakSet('')).toBe(false)
    expect(isWeakSet('abc')).toBe(false)
    expect(isWeakSet(false)).toBe(false)
    expect(isWeakSet(true)).toBe(false)
    expect(isWeakSet(0)).toBe(false)
    expect(isWeakSet(-1)).toBe(false)
    expect(isWeakSet(1)).toBe(false)
    expect(isWeakSet(NaN)).toBe(false)
    expect(isWeakSet(Infinity)).toBe(false)
    expect(isWeakSet(-Infinity)).toBe(false)
    expect(isWeakSet({})).toBe(false)
    expect(isWeakSet([])).toBe(false)
    expect(isWeakSet(/abc/)).toBe(false)
    expect(isWeakSet(new RegExp('abc'))).toBe(false)
    expect(isWeakSet(async () => {})).toBe(false)
    expect(isWeakSet(() => {})).toBe(false)
    expect(isWeakSet(function() {})).toBe(false)
    expect(isWeakSet(function*() {})).toBe(false)
    expect(isWeakSet((function*() {})())).toBe(false)
    expect(isWeakSet(new Array(0))).toBe(false)
    expect(isWeakSet(new ArrayBuffer(2))).toBe(false)
    expect(isWeakSet(new Boolean(false))).toBe(false)
    expect(isWeakSet(new Boolean(true))).toBe(false)
    expect(isWeakSet(new Date())).toBe(false)
    expect(isWeakSet(new Error())).toBe(false)
    expect(isWeakSet(new Number(1))).toBe(false)
    expect(isWeakSet(new Promise(() => {}))).toBe(false)
    expect(isWeakSet(new Proxy({}, {}))).toBe(false)
    expect(isWeakSet(new Set())).toBe(false)
    expect(isWeakSet(new String('abc'))).toBe(false)
    expect(isWeakSet(Symbol('abc'))).toBe(false)
    expect(isWeakSet(new WeakMap())).toBe(false)
  })
})
