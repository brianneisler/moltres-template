import isWeakMap from './isWeakMap'

describe('isWeakMap', () => {
  test('returns true for instances of WeakMap', () => {
    expect(isWeakMap(new WeakMap())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isWeakMap(undefined)).toBe(false)
    expect(isWeakMap(null)).toBe(false)
    expect(isWeakMap('')).toBe(false)
    expect(isWeakMap('abc')).toBe(false)
    expect(isWeakMap(false)).toBe(false)
    expect(isWeakMap(true)).toBe(false)
    expect(isWeakMap(0)).toBe(false)
    expect(isWeakMap(-1)).toBe(false)
    expect(isWeakMap(1)).toBe(false)
    expect(isWeakMap(NaN)).toBe(false)
    expect(isWeakMap(Infinity)).toBe(false)
    expect(isWeakMap(-Infinity)).toBe(false)
    expect(isWeakMap({})).toBe(false)
    expect(isWeakMap([])).toBe(false)
    expect(isWeakMap(/abc/)).toBe(false)
    expect(isWeakMap(new RegExp('abc'))).toBe(false)
    expect(isWeakMap(async () => {})).toBe(false)
    expect(isWeakMap(() => {})).toBe(false)
    expect(isWeakMap(function() {})).toBe(false)
    expect(isWeakMap(function*() {})).toBe(false)
    expect(isWeakMap((function*() {})())).toBe(false)
    expect(isWeakMap(new Array(0))).toBe(false)
    expect(isWeakMap(new ArrayBuffer(2))).toBe(false)
    expect(isWeakMap(new Boolean(false))).toBe(false)
    expect(isWeakMap(new Boolean(true))).toBe(false)
    expect(isWeakMap(new Date())).toBe(false)
    expect(isWeakMap(new Error())).toBe(false)
    expect(isWeakMap(new Number(1))).toBe(false)
    expect(isWeakMap(new Promise(() => {}))).toBe(false)
    expect(isWeakMap(new Proxy({}, {}))).toBe(false)
    expect(isWeakMap(new Set())).toBe(false)
    expect(isWeakMap(new String('abc'))).toBe(false)
    expect(isWeakMap(Symbol('abc'))).toBe(false)
    expect(isWeakMap(new WeakSet())).toBe(false)
  })
})
