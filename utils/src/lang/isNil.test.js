import isNil from './isNil'

describe('isNil', () => {
  test('returns true for null', () => {
    expect(isNil(null)).toBe(true)
  })

  test('returns true for undefined', () => {
    expect(isNil(undefined)).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isNil('')).toBe(false)
    expect(isNil('abc')).toBe(false)
    expect(isNil(false)).toBe(false)
    expect(isNil(true)).toBe(false)
    expect(isNil(0)).toBe(false)
    expect(isNil(-1)).toBe(false)
    expect(isNil(1)).toBe(false)
    expect(isNil(NaN)).toBe(false)
    expect(isNil(Infinity)).toBe(false)
    expect(isNil(-Infinity)).toBe(false)
    expect(isNil({})).toBe(false)
    expect(isNil([])).toBe(false)
    expect(isNil(new Array(0))).toBe(false)
    expect(isNil([0])).toBe(false)
    expect(isNil(/abc/)).toBe(false)
    expect(isNil(async () => {})).toBe(false)
    expect(isNil(() => {})).toBe(false)
    expect(isNil(function() {})).toBe(false)
    expect(isNil((function*() {})())).toBe(false)
    expect(isNil(new ArrayBuffer(2))).toBe(false)
    expect(isNil(new Boolean(false))).toBe(false)
    expect(isNil(new Boolean(true))).toBe(false)
    expect(isNil(new Date())).toBe(false)
    expect(isNil(new Error())).toBe(false)
    expect(isNil(new Map())).toBe(false)
    expect(isNil(new Number(1))).toBe(false)
    expect(isNil(new Promise(() => {}))).toBe(false)
    expect(isNil(new Proxy({}, {}))).toBe(false)
    expect(isNil(new Set())).toBe(false)
    expect(isNil(new String('abc'))).toBe(false)
    expect(isNil(Symbol('abc'))).toBe(false)
    expect(isNil(new WeakMap())).toBe(false)
    expect(isNil(new WeakSet())).toBe(false)
  })
})
