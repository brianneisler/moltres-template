import isElement from './isElement'

describe('isElement', () => {
  // test('returns true for object with nodeType property', () => {
  //   expect(isElement({ nodeType: 1 })).toBe(true)
  // })

  test('returns false for all other values', () => {
    expect(isElement(undefined)).toBe(false)
    expect(isElement(null)).toBe(false)
    expect(isElement('')).toBe(false)
    expect(isElement('abc')).toBe(false)
    expect(isElement(false)).toBe(false)
    expect(isElement(true)).toBe(false)
    expect(isElement(0)).toBe(false)
    expect(isElement(-1)).toBe(false)
    expect(isElement(1)).toBe(false)
    expect(isElement(NaN)).toBe(false)
    expect(isElement(Infinity)).toBe(false)
    expect(isElement(-Infinity)).toBe(false)
    expect(isElement({})).toBe(false)
    expect(isElement([])).toBe(false)
    expect(isElement(/abc/)).toBe(false)
    expect(isElement(async () => {})).toBe(false)
    expect(isElement(() => {})).toBe(false)
    expect(isElement(function() {})).toBe(false)
    expect(isElement((function*() {})())).toBe(false)
    expect(isElement(new Array(0))).toBe(false)
    expect(isElement(new ArrayBuffer(2))).toBe(false)
    expect(isElement(new Boolean(false))).toBe(false)
    expect(isElement(new Boolean(true))).toBe(false)
    expect(isElement(new Date())).toBe(false)
    expect(isElement(new Error())).toBe(false)
    expect(isElement(new Number(1))).toBe(false)
    expect(isElement(new Promise(() => {}))).toBe(false)
    expect(isElement(new Proxy({}, {}))).toBe(false)
    expect(isElement(new Set())).toBe(false)
    expect(isElement(new String('abc'))).toBe(false)
    expect(isElement(Symbol('abc'))).toBe(false)
    expect(isElement(new WeakMap())).toBe(false)
    expect(isElement(new WeakSet())).toBe(false)
  })
})
