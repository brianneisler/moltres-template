import isInfinity from './isInfinity'

describe('isInfinity', () => {
  test('returns true for Infinity and -Infinity', () => {
    expect(isInfinity(Infinity)).toBe(true)
    expect(isInfinity(-Infinity)).toBe(true)
  })

  test('returns true for native Number object Infinity and -Infinity', () => {
    expect(isInfinity(new Number(Infinity))).toBe(true)
    expect(isInfinity(new Number(-Infinity))).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isInfinity(undefined)).toBe(false)
    expect(isInfinity(null)).toBe(false)
    expect(isInfinity('')).toBe(false)
    expect(isInfinity('abc')).toBe(false)
    expect(isInfinity(false)).toBe(false)
    expect(isInfinity(true)).toBe(false)
    expect(isInfinity(0)).toBe(false)
    expect(isInfinity(-1)).toBe(false)
    expect(isInfinity(1)).toBe(false)
    expect(isInfinity(NaN)).toBe(false)
    expect(isInfinity({})).toBe(false)
    expect(isInfinity([])).toBe(false)
    expect(isInfinity(new Array(0))).toBe(false)
    expect(isInfinity([0])).toBe(false)
    expect(isInfinity(/abc/)).toBe(false)
    expect(isInfinity(async () => {})).toBe(false)
    expect(isInfinity(() => {})).toBe(false)
    expect(isInfinity(function() {})).toBe(false)
    expect(isInfinity((function*() {})())).toBe(false)
    expect(isInfinity(new ArrayBuffer(2))).toBe(false)
    expect(isInfinity(new Boolean(false))).toBe(false)
    expect(isInfinity(new Boolean(true))).toBe(false)
    expect(isInfinity(new Date())).toBe(false)
    expect(isInfinity(new Error())).toBe(false)
    expect(isInfinity(new Map())).toBe(false)
    expect(isInfinity(new Number(1))).toBe(false)
    expect(isInfinity(new Promise(() => {}))).toBe(false)
    expect(isInfinity(new Proxy({}, {}))).toBe(false)
    expect(isInfinity(new Set())).toBe(false)
    expect(isInfinity(new String('abc'))).toBe(false)
    expect(isInfinity(Symbol('abc'))).toBe(false)
    expect(isInfinity(Symbol.for('def'))).toBe(false)
    expect(isInfinity(new WeakMap())).toBe(false)
    expect(isInfinity(new WeakSet())).toBe(false)
  })
})
